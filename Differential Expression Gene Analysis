# Analysis using pydeseq2 to find significant differentially expressed genes

# Installing package:
%pip install pydeseq2

from pydeseq2.dds import DeseqDataSet
from pydeseq2.ds import DeseqStats

import pandas as pd

# Generating a counts table from our csv data:
counts = pd.read_csv('count_table.csv')

counts = counts.set_index('GeneID') # Set the dataframe index column to the GeneID
counts = counts[counts.sum(axis = 1) > 0] # Get rid of columns with zero counts
counts = counts.transpose() # For pyedeseq2 you must transpose the counts table

counts = counts.round(decimals=0, out=None) # Might be needed

# Generating a metadata dataframe: 
metadata = pd.DataFrame(zip(counts.index, ['Sample 1', 'Sample 2', 'Sample 3', 'Sample 4', 'Sample 5', 'Sample 6', 'Sample 7', 'Sample 8', 'Sample 9', 'Sample 10']), columns = ['Sample', 'Condition']) 
metadata = metadata.set_index('Sample')

# Differential Expression Analysis:
dds = DeseqDataSet(counts=counts,
             clinical=metadata,
             design_factors="Condition")
dds.obs # The observation dataframe
dds.X   # The count matrix
dds.var # The Gene Ids

stat_res = DeseqStats(dds, n_cpus=10, contrast = ('Condition', 'Sample 1', 'Sample 2'))
stat_res.summary()

res = stat_res.results_df
res # The differentially expressed dataframe

# Convert the gene ids to actual gene symbols:
%pip install sanbomics
from sanbomics.tools import id_map
mapper = id_map(species = 'human')
mapper.mapper # A dictionary with all the gene Ids and gene symbols
res['Symbol'] = res.index.map(mapper.mapper)
res # Now contains the actual gene symbols

# Filtering of the dataframe:
res = res[res.baseMean >= 10]

sigs = res[(res.padj < 0.05) & (abs(res.log2FoldChange) > 0.5)] # Finding significant differentially expressed genes (P adjustev value < 0.05, absolute value log 2 fold change filter > 0.5 means genes that actually changed at least 0.5 log fold)



