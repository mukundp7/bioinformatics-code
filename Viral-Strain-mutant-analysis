# Installing the necessary packages
!pip install -q condacolab
import condacolab
condacolab.install()
!conda install -c bioconda -y mafft
%pip install Biopython
from Bio import SeqIO

# Reading the sequences with BioPythons SeqIO (ex: coronavirus variants)
fasta = list(SeqIO.parse('sequences.fasta', format = 'fasta'))
fasta

# Printing the FASTA sequence names
for entry in fasta:
  print(entry.id)
  
# Converting the list to a dictionary 
seqs = {}
for entry in fasta:
  seqs[entry.id] = entry
 
# To find specific sequence record in the dictionary 
seqs['Alpha_Strain'] 

# To find the nucleotide sequence
seqs['Alpha_Strain'].seq

# To find the length of each sequence
for entry in fasta:
  print(len(entry.seq))
 
# Alignment using MAFFT 
!mafft sequences.fasta > seqs_ali.fasta

# Aligned sequences can then be re run through the programs
fasta = list(SeqIO.parse('seqs_ali.fasta', format = 'fasta'))

# Length function will show that all the aligned sequences are the same length
for entry in fasta:
  print(len(entry.seq))

# To compare the proteins we will use the spike protein region which can be retrieved from the NCBI page for the reference strain.
# Spike protein region for coronavirus reference strain: 21563..25384

# We need to find the spike protein region for the aligned sequence. This function will add the gaps to the sequence length. 
def gapped_pos(seq, pos):
  non_gap = 0
  gaps = 0
  for nt in seq:
    if nt != '-':
      non_gap += 1
    else:
      gaps += 1
    if non_gap == pos:
      return pos + gaps

# Test: we should get 6 a's + 2 gaps which gives us 8.
gapped_pos('aaa-aa-a', 6)

# We need to find the gapped position for the coronavirus spike protein. Only need to do one because the sequences are already aligned. If there are no gaps the position output will be the same as the reference. 
gapped_pos(seqs['Alpha_Strain'].seq, 21563)
gapped_pos(seqs['Alpha_Strain'].seq, 25384)

# To find the sequence of the spike protein
spikes = {}
for seq in fasta:
  spikes[seq.id] = seq.seq[21563-1:25384]

# Print the beginning of the sequence to make sure it starts with ATG
for spike in spikes:
  print(spikes[spike][0:10])

# To compare the reference strain to the variants 
def get_mutations(initial, variant):
  seqs = list(zip(initial, variant))
  for pos, nt in enumerate(seqs):
    if nt[0] != nt[1]:
      print(nt[0].upper() + str(pos) + nt[1].upper())

# To print the nucleotide differences between the two strains (frame deletions or insertions)
get_mutations(spikes['Reference_Strain'], spikes['Variant_Strain'])

# Take the spike sequences get rid of the gaps and translate them to a new file
with open('spikes.fasta', 'w') as f:
  for spike in spikes:
    out = spikes[spike].replace('-', '').translate()
    f.write('>'+ spike + '\n')
    f.write(str(out).upper()+'\n')

# Alignment
!mafft spikes.fasta > spikes_ali.fasta

# Reading the amino acid sequences
spikes_aa = list(SeqIO.parse('spikes_ali.fasta', format = 'fasta'))
spikes_aa

# Making a dictionary 
seqs = {}
for entry in spikes_aa:
  seqs[entry.id] = entry.seq

# Finding mutations in the strain compared to the reference to a list
def get_aa_mutations(initial, variant):
  out = []
  seqs = list(zip(initial, variant))
  for pos, aa in enumerate(seqs):
    if aa[0] != aa[1]:
      out.append(aa[0].upper() + str(pos) + aa[1].upper())
  return out

get_aa_mutations(seqs['Reference_Strain'], seqs['Variant_Strain'])
len(get_aa_mutations(seqs['Reference_Strain'], seqs['Variant_Strain']))

# Charting the differences in spike proteins
import matplotlib.pyplot as plt

mutations = {}
for item in seqs:
  mutations[item] = get_aa_mutations(seqs['Reference_Strain'], seqs[item])

plt.figure(figsize = (15,5))
for y, item in enumerate(seqs):
  plt.plot((0, len(seqs['Reference_Strain'])), (y,y), color = 'lightgrey')
  plt.text(-160, y+.5, item, va = 'center', ha = 'left')

  for yy, mutation in enumerate(mutations[item]):
    pos = int(mutation[1:-1])
    aa_change = mutation[-1]
    if yy%3 == 0:
      plt.text(pos, y-.2, aa_change, va = 'center', ha = 'center')
    elif yy%2 == 0:
      plt.text(pos, y, aa_change, va = 'center', ha = 'center')
    else:
      plt.text(pos, y+.2, aa_change, va = 'center', ha = 'center')

    pass
  plt.xlim(-175, len(seqs['Reference_Strain']) + 100)
  plt.ylim(-.75, 5.75)

  
